# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  schedule:
    - cron: 0 20 * * *
  push:
    branches:
      - master
  release:
    types: [published]   

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config
          
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          
          # Basic Setting
          cat >> .config <<EOF
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_KERNEL_BUILD_USER="OpenWrt"
          CONFIG_KERNEL_BUILD_DOMAIN="Azure"
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          CONFIG_TARGET_KERNEL_PARTSIZE=32
          CONFIG_TARGET_ROOTFS_PARTSIZE=822
          CONFIG_GRUB_TIMEOUT="0"
          CONFIG_PACKAGE_kmod-hwmon-pwmfan=y
          CONFIG_PACKAGE_addition-trans-zh=y
          CONFIG_PACKAGE_autocore-x86=y
          CONFIG_PACKAGE_ethtool=y
          CONFIG_PACKAGE_dnsmasq-full=y
          CONFIG_PACKAGE_dnsmasq_full_ipset=y
          # CONFIG_PACKAGE_dnsmasq is not set
          CONFIG_PACKAGE_kmod-fs-f2fs=y
          CONFIG_PACKAGE_libustream-openssl=y
          # CONFIG_PACKAGE_libustream-wolfssl is not set
          CONFIG_PACKAGE_wget-ssl=y
          CONFIG_PACKAGE_qemu-ga=y
          CONFIG_PACKAGE_irqbalance=y
          CONFIG_PACKAGE_kmod-igc=y
          CONFIG_PACKAGE_kmod-r8125=y
          CONFIG_PACKAGE_kmod-igb-intel=y
          CONFIG_PACKAGE_kmod-mlx4-core=y
          CONFIG_PACKAGE_i915-firmware=y
          
          ## 22.03 ##
          # CONFIG_PACKAGE_firewall is not set
          CONFIG_PACKAGE_firewall4=y
          CONFIG_PACKAGE_kmod-ipt-offload=y
          CONFIG_DEFAULT_kmod-nft-offload=y
          # CONFIG_PACKAGE_arptables-legacy is not set
          CONFIG_PACKAGE_arptables-nft=y
          # CONFIG_PACKAGE_ebtables-legacy is not set
          CONFIG_PACKAGE_ebtables-nft=y
          # CONFIG_PACKAGE_ip6tables-legacy is not set
          CONFIG_PACKAGE_ip6tables-mod-fullconenat=y
          CONFIG_PACKAGE_ip6tables-nft=y
          # CONFIG_PACKAGE_iptables-legacy is not set
          CONFIG_PACKAGE_iptables-mod-fullconenat=y
          CONFIG_PACKAGE_iptables-nft=y
          CONFIG_PACKAGE_kmod-nft-fullcone=y
          # CONFIG_PACKAGE_miniupnpd-iptables is not set
          CONFIG_PACKAGE_miniupnpd-nftables=y
          
          ### LUCI ###
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_LUCI_LANG_en=y
          # CONFIG_LUCI_CSSTIDY is not set
          # CONFIG_LUCI_JSMIN is not set
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-compat=y
          

          ### APPLICATION ###
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_PACKAGE_luci-app-adguardhome=y
          CONFIG_PACKAGE_luci-app-socat=y
          CONFIG_PACKAGE_luci-app-argon-config=y
          CONFIG_PACKAGE_luci-app-arpbind=y
          CONFIG_PACKAGE_luci-app-autoreboot=y
          CONFIG_PACKAGE_luci-app-cpufreq=y
          CONFIG_PACKAGE_luci-app-cpulimit=y
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-app-ramfree=y
          CONFIG_PACKAGE_luci-app-serverchan=y
          CONFIG_PACKAGE_luci-app-uhttpd=y
          CONFIG_PACKAGE_luci-app-sqm=y
          CONFIG_PACKAGE_luci-app-vlmcsd=y
          CONFIG_PACKAGE_luci-app-upnp=y
          CONFIG_PACKAGE_luci-app-services-wolplus=y
          CONFIG_PACKAGE_luci-app-netdata=y
          CONFIG_PACKAGE_luci-app-wrtbwmon=y
          CONFIG_PACKAGE_luci-app-irqbalance=y
          CONFIG_PACKAGE_luci-app-softethervpn=y
          CONFIG_PACKAGE_coremark=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_wget=y
          
          ### THEME ###
          CONFIG_PACKAGE_luci-theme-argon=y
          EOF
          #========

      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
  

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
